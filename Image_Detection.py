import io
import cv2
import numpy as np
from PIL import Image
import streamlit as st


# ===================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ======================

st.set_page_config(
    layout='wide',
    initial_sidebar_state='auto',
    page_title='Face Emotion Recognition',
    page_icon='üëª',
    )

st.write("#### –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü, —ç–º–æ—Ü–∏–π, –ø–æ–ª–∞, —Ä–∞—Å—ã –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")

# –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
@st.cache_data
def load_main_image(image_path: str) -> Image.Image:
    main_pil_image = Image.open(image_path)
    return main_pil_image

MAIN_IMAGE_PATH = './media/emotions_detect.png'
main_pil_image = load_main_image(MAIN_IMAGE_PATH)
st.image(main_pil_image, width=800)

# ===================== –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ======================

st.sidebar.header('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
st.sidebar.write('---')

face_conf_threshold = st.sidebar.slider(
    label='–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü',
    min_value=0.0,
    max_value=1.0,
    value=0.7,
    step=0.01,
    )
st.sidebar.write('---')

# –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –¥–µ—Ç–µ–∫—Ç–∏—Ç—å (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ)
actions = ['age', 'gender', 'race', 'emotion']
# –ø—Ä–∏–º–µ–Ω—è—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
st.sidebar.write('–ü—Ä–∏–º–µ–Ω—è—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ')
align = st.sidebar.checkbox(label='Align', value=False)


# –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
with st.spinner('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...'):
    from detector import detector_model

# ==================== –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ============

st_image = st.file_uploader(label='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
st.session_state['detect_image_ready'] = False

if st_image:
    pil_image = Image.open(st_image)
    np_image_rgb = np.array(pil_image)
    
    np_image_bgr = cv2.cvtColor(np_image_rgb, cv2.COLOR_RGB2BGR)
    st.image(np_image_bgr, width=400, channels='BGR')
    
    # ================ –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ==================    

    if st.button('–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å'):
        if detector_model.is_first_run:
            spinner_text = '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ...'
        else:
            spinner_text = '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ ...'

        with st.spinner(spinner_text):
            detections = detector_model.detect_image(
                np_image_bgr, 
                actions=actions,
                align=align,
                )
            detector_model.is_first_run = False

        with st.spinner('–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'):
            result_np_image = detector_model.draw_detections(
                np_image_rgb=np_image_rgb,
                detections=detections,
                face_conf_threshold=face_conf_threshold,
                )
            st.session_state['detect_image_ready'] = True

# –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
if st.session_state['detect_image_ready']:
    st.image(result_np_image)

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á—Ç–æ–±—ã –µ–µ —Å–∫–∞—á–∞—Ç—å
    image_name = f"{st_image.name.split('.')[0]}_detect.png"
    file_buffer = io.BytesIO()
    result_pil_image = Image.fromarray(result_np_image)
    result_pil_image.save(file_buffer, format='PNG')
    image_bytes = file_buffer.getvalue()
    
    # ================ –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å ================== 

    st.download_button(
        label='–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 
        data=image_bytes, 
        file_name=image_name,
        mime='image/png',
        )
    st.session_state['detect_image_ready'] = False
